/*
This microkernel perform 16-bit max pooling on 16384 128x128 images with 2x2 kernel

1) Image Data Layout:
  assume we have the following 4x4 example zero-padded image:
  I = [a b c d 0]
      [e f g h 0]
      [i j k l 0]
      [m n o p 0]
      [0 0 0 0 0]
  RACER stores it in a compute unit using 4 64-vectors:
  v7 v6 v5 v4
  a  b  e  f
  b  c  f  g
  c  d  g  h
  d  0  h  0
  .
  .
  .
  (This is a modified Z format)

The MAXMIN4 operation are performed on these 4 vector.
*/

/*============================= MAIN PROGRAM =================================*/
/*
  (*) Each cluster turns on 13 compute units. This is because:
      With capacity of 64 vectors:
        - 7 vectors store intermediate values (64 - 7 = 57)
        - Each maxpool output requires 4 input, 2 intermediate candidates,
        3 decider, total of 10 (57/10 = 5)
        -> 5 vectors storing output, each has 64 bits (5 * 64 = 320)
        -> One compute unit can perform 4 MAXMIN in parallel (320 * 4 = 1280)
        - Each image is 16384 (128 x 128) bits so need 13 compute unit (16384 / 1280 = 13)
  (*) The output is stored in Z-format order
  (*) The last argument of all compute instruction is a simulated-level argument,
    and it represents an energy multiplicative factor. Because a multiword can
    be broken down into multiple compute engine doing the same thing, the multiplicative
    factor is a quick way to calculate the energy consumption of multiple engines.
    Because all engines operate in parallel, there is not equivalent factor for latency.

*/

SETBULK 0 4096 64
SETBULK 1 4096 64
SETBULK 2 4096 64
SETBULK 3 4096 64
SETBULK 4 4096 64
SETBULK 5 4096 64
SETBULK 6 4096 64
SETBULK 7 4096 64
SETBULK 8 4096 64
SETBULK 9 4096 64
SETBULK 10 4096 64
SETBULK 11 4096 64
SETBULK 12 4096 64

4MAXMIN16 x x x x 5 4
UNSETALL
