/*
This kernel string match 8192 strings of 512 characters each

Exact match can be think og in term of matrix-vector multiply, where the semiring
definition is * = CAM and + = POPC

  (*) The input and output vector length should be the same => square matrix

  (*)  Each ouput vector needs
      - 7 vectors used for intermediate values (64 - 7 = 57)
      - Each output requires 2n inputs and n matches for the total of 3n + 1
      => n = 18
      => 4 engines per match program

  (*) A single 64-bit vector SHIFT (latch into buffer, latch from buffer) has a
      cost of (taken from device-level simulation of a LATCH operation):
         - Latency = 2 x 5.281 = 10.562 (ns)
         - Energy  = 2 x 1.6384 = 3.2768 (pJ)
      The SHIFT cost can be calculated accordingly

  (*) The cost of data movement between compute unit is calculated as:
      - Assume the chip clock period is 2.64 ns
      - All power and latency number generated from verilog circuit level simulation
      - Load Latency = 2 COPY (NOR) + 64 READ burst + 64 WRITE + 64 Cluster Wire Delay
                     = 2 x 2.6405 + 64 x 2.64 + 64 x 2.64 + 64 x 1.438
                     = 482 ns
      - Load Energy  = Load Latency x Total Power
                     = 435233 (ps) x 0.0079 (W)
                     = 1024 (pJ)
*/
SETBULK 0 1024 64
SETBULK 1 1024 64
SETBULK 2 1024 64
SETBULK 3 1024 64
SETBULK 4 1024 64
SETBULK 5 1024 64
SETBULK 6 1024 64
SETBULK 7 1024 64
SETBULK 8 1024 64
SETBULK 9 1024 64
SETBULK 10 1024 64
SETBULK 11 1024 64
SETBULK 12 1024 64
SETBULK 13 1024 64
SETBULK 14 1024 64
SETBULK 15 1024 64
SETBULK 16 1024 64
SETBULK 17 1024 64
SETBULK 18 1024 64
SETBULK 19 1024 64
SETBULK 20 1024 64
SETBULK 21 1024 64
SETBULK 22 1024 64
SETBULK 23 1024 64
SETBULK 24 1024 64
SETBULK 25 1024 64
SETBULK 26 1024 64
SETBULK 27 1024 64
SETBULK 28 1024 64
SETBULK 29 1024 64
SETBULK 30 1024 64
SETBULK 31 1024 64
SETBULK 32 1024 64
SETBULK 33 1024 64
SETBULK 34 1024 64
SETBULK 35 1024 64
SETBULK 36 1024 64
SETBULK 37 1024 64
SETBULK 38 1024 64
SETBULK 39 1024 64
SETBULK 40 1024 64
SETBULK 41 1024 64
SETBULK 42 1024 64
SETBULK 43 1024 64
SETBULK 44 1024 64
SETBULK 45 1024 64
SETBULK 46 1024 64
SETBULK 47 1024 64
SETBULK 48 1024 64
SETBULK 49 1024 64
SETBULK 50 1024 64
SETBULK 51 1024 64
SETBULK 52 1024 64
SETBULK 53 1024 64
SETBULK 54 1024 64
SETBULK 55 1024 64
SETBULK 56 1024 64
SETBULK 57 1024 64
SETBULK 58 1024 64
SETBULK 59 1024 64
SETBULK 60 1024 64
SETBULK 61 1024 64
SETBULK 62 1024 64
SETBULK 63 1024 64
CAM8 x x x 18 8
AND1 x x x 8
AND1 x x x 8
AND1 x x x 8
AND1 x x x 8
AND1 x x x 8
AND1 x x x 8
AND1 x x x 8
AND1 x x x 8
AND1 x x x 8
AND1 x x x 8
AND1 x x x 8
AND1 x x x 8
AND1 x x x 8
AND1 x x x 8
AND1 x x x 8
AND1 x x x 8
AND1 x x x 8
AND1 x x x 8
UNSETALL

SETBULK 0 1 1
SHIFT 64 65536
UNSETALL

SETBULK 0 1024 64
SETBULK 1 1024 64
SETBULK 2 1024 64
SETBULK 3 1024 64
SETBULK 4 1024 64
SETBULK 5 1024 64
SETBULK 6 1024 64
SETBULK 7 1024 64
AND1 x x x 8
AND1 x x x 8
AND1 x x x 8
AND1 x x x 8
AND1 x x x 8
AND1 x x x 8
AND1 x x x 8
AND1 x x x 8
UNSETALL

SETBULK 0 1 1
PROP 192 784800
UNSETALL

SETBULK 0 1024 64
SETBULK 1 1024 64
SETBULK 2 1024 64
SETBULK 3 1024 64
SETBULK 4 1024 64
SETBULK 5 1024 64
SETBULK 6 1024 64
SETBULK 7 1024 64
AND1 x x x 2
AND1 x x x 2
AND1 x x x 2
AND1 x x x 2
UNSETALL
