/*
  This kernel count the number of words in 64 58720256 (about 1700 pages single line) characters file
  (*) The input and output vector length should be the same => square matrix

  (*)  Each ouput vector needs
      - 7 vectors used for intermediate values (64 - 7 = 57)
      - Each output requires 2n inputs and n matches for the total of 2n + 1
      => n = 28

  (*) A single 64-bit vector SHIFT (latch into buffer, latch from buffer) has a
      cost of (taken from device-level simulation of a LATCH operation):
         - Latency = 2 x 6 = 12 (ns)
         - Energy  = 2 x 1.6384 = 3.2768 (pJ)
      The SHIFT cost can be calculated accordingly

  (*) 1 LLOAD cost:
         - Latency = 2 COPY (NOR) + 64 READ burst + 64 WRITE + 64 Cluster Wire Delay
                       = 2 x 3.05 + 64 x 3 + 64 x 3 + 64 x 1.438
                       = 482 (ns)
         - Energy  = Load Latency x Total Power
                       = 482000 (ps) x 0.0079 (W)
                       = 4097 (pJ)

*/

// Produce match result
SETBULK 0 4096 64
SETBULK 1 4096 64
SETBULK 2 4096 64
SETBULK 3 4096 64
SETBULK 4 4096 64
SETBULK 5 4096 64
SETBULK 6 4096 64
SETBULK 7 4096 64
SETBULK 8 4096 64
SETBULK 9 4096 64
SETBULK 10 4096 64
SETBULK 11 4096 64
SETBULK 12 4096 64
SETBULK 13 4096 64
SETBULK 14 4096 64
SETBULK 15 4096 64
SETBULK 16 4096 64
SETBULK 17 4096 64
SETBULK 18 4096 64
SETBULK 19 4096 64
SETBULK 20 4096 64
SETBULK 21 4096 64
SETBULK 22 4096 64
SETBULK 23 4096 64
SETBULK 24 4096 64
SETBULK 25 4096 64
SETBULK 26 4096 64
SETBULK 27 4096 64
SETBULK 28 4096 64
SETBULK 29 4096 64
SETBULK 30 4096 64
SETBULK 31 4096 64
SETBULK 32 4096 64
SETBULK 33 4096 64
SETBULK 34 4096 64
SETBULK 35 4096 64
SETBULK 36 4096 64
SETBULK 37 4096 64
SETBULK 38 4096 64
SETBULK 39 4096 64
SETBULK 40 4096 64
SETBULK 41 4096 64
SETBULK 42 4096 64
SETBULK 43 4096 64
SETBULK 44 4096 64
SETBULK 45 4096 64
SETBULK 46 4096 64
SETBULK 47 4096 64
SETBULK 48 4096 64
SETBULK 49 4096 64
SETBULK 50 4096 64
SETBULK 51 4096 64
SETBULK 52 4096 64
SETBULK 53 4096 64
SETBULK 54 4096 64
SETBULK 55 4096 64
SETBULK 56 4096 64
SETBULK 57 4096 64
SETBULK 58 4096 64
SETBULK 59 4096 64
SETBULK 60 4096 64
SETBULK 61 4096 64
SETBULK 62 4096 64
SETBULK 63 4096 64
CAM8 x x x 28 8
ADD8 x x x 28 8
UNSETALL

SETBULK 0 1 1
PROP 56 469763048
UNSETALL

// Reduce 8 lanes to 1
SETBULK 0 4096 64
SETBULK 1 4096 64
SETBULK 2 4096 64
SETBULK 3 4096 64
SETBULK 4 4096 64
SETBULK 5 4096 64
SETBULK 6 4096 64
SETBULK 7 4096 64
SETBULK 8 4096 64
SETBULK 9 4096 64
SETBULK 10 4096 64
SETBULK 11 4096 64
SETBULK 12 4096 64
SETBULK 13 4096 64
SETBULK 14 4096 64
SETBULK 15 4096 64
SETBULK 16 4096 64
SETBULK 17 4096 64
SETBULK 18 4096 64
SETBULK 19 4096 64
SETBULK 20 4096 64
SETBULK 21 4096 64
SETBULK 22 4096 64
SETBULK 23 4096 64
SETBULK 24 4096 64
SETBULK 25 4096 64
SETBULK 26 4096 64
SETBULK 27 4096 64
SETBULK 28 4096 64
SETBULK 29 4096 64
SETBULK 30 4096 64
SETBULK 31 4096 64
SETBULK 32 4096 64
SETBULK 33 4096 64
SETBULK 34 4096 64
SETBULK 35 4096 64
SETBULK 36 4096 64
SETBULK 37 4096 64
SETBULK 38 4096 64
SETBULK 39 4096 64
SETBULK 40 4096 64
SETBULK 41 4096 64
SETBULK 42 4096 64
SETBULK 43 4096 64
SETBULK 44 4096 64
SETBULK 45 4096 64
SETBULK 46 4096 64
SETBULK 47 4096 64
SETBULK 48 4096 64
SETBULK 49 4096 64
SETBULK 50 4096 64
SETBULK 51 4096 64
SETBULK 52 4096 64
SETBULK 53 4096 64
SETBULK 54 4096 64
SETBULK 55 4096 64
SETBULK 56 4096 64
SETBULK 57 4096 64
SETBULK 58 4096 64
SETBULK 59 4096 64
SETBULK 60 4096 64
SETBULK 61 4096 64
SETBULK 62 4096 64
SETBULK 63 4096 64
ADD8 x x x 8 1
UNSETALL

// Reduce the first 32 multiwords
SETBULK 0 1 1
SHIFT 32 131072
UNSETALL
SETBULK 0 4096 64
ADD8 x x x 32 1
UNSETALL

// Reduce the last 32 multiwords
SETBULK 0 1 1
SHIFT 32 131072
UNSETALL
SETBULK 0 4096 64
ADD8 x x x 32 1
UNSETALL



// Horizontal Reduction=========================================================
// Layer 1 64 -> 32
SETBULK 0 1 1
SHIFT 1 2048
UNSETALL
SETBULK 0 2048 64
ADD8 x x x 1 1
UNSETALL

// Layer 2 32 -> 16
SETBULK 0 1 1
SHIFT 2 2048
UNSETALL
SETBULK 0 1024 64
ADD8 x x x 1 1
UNSETALL

// Layer 3 16 -> 8
SETBULK 0 1 1
SHIFT 4 2048
UNSETALL
SETBULK 0 512 64
ADD8 x x x 1 1
UNSETALL

// Layer 4 8 -> 4
SETBULK 0 1 1
SHIFT 8 2048
UNSETALL
SETBULK 0 256 64
ADD8 x x x 1 1
UNSETALL

// Layer 5 4 -> 2
SETBULK 0 1 1
SHIFT 16 2048
UNSETALL
SETBULK 0 128 64
ADD8 x x x 1 1
UNSETALL

// Layer 6 2 -> 1
SETBULK 0 1 1
SHIFT 32 2048
UNSETALL
SETBULK 0 64 64
ADD8 x x x 1 1
UNSETALL

// Vertical Reduction===========================================================
// Layer 1 64 -> 32
SETBULK 0 1 1
SHIFT 1 32
UNSETALL
SETBULK 0 32 64
ADD8 x x x 1 1
UNSETALL

// Layer 2 32 -> 16
SETBULK 0 1 1
SHIFT 2 32
UNSETALL
SETBULK 0 16 64
ADD8 x x x 1 1
UNSETALL

// Layer 3 16 -> 8
SETBULK 0 1 1
SHIFT 4 32
UNSETALL
SETBULK 0 8 64
ADD8 x x x 1 1
UNSETALL

// Layer 4 8 -> 4
SETBULK 0 1 1
SHIFT 8 32
UNSETALL
SETBULK 0 4 64
ADD8 x x x 1 1
UNSETALL

// Layer 5 4 -> 2
SETBULK 0 1 1
SHIFT 16 32
UNSETALL
SETBULK 0 2 64
ADD8 x x x 1 1
UNSETALL

// Layer 6 2 -> 1
SETBULK 0 1 1
SHIFT 32 32
UNSETALL
SETBULK 0 1 64
ADD8 x x x 1 1
UNSETALL
