/*
Calculate distance of 64 points to a database of 9437184 points

This kernel find hamming distance between a single test point with the entire data base,
then

(*) There are 64 vectors:
    - 7 vectors are needed to store intermediate values (64 - 7 = 57)
    - 2 vector needed to store the clustering input (57 - 2 = 55)
    - Let 3n be number of database stored in 1 engine
    - 3n vectors are required to store intermediate values (ABS and SUB)
    values needed (from XOR) => 6n is needed => n = 9

(*) A single 64-bit vector SHIFT (latch into buffer, latch from buffer) has a
    cost of (taken from device-level simulation of a LATCH operation):
       - Latency = 2 x 5.281 = 10.562 (ns)
       - Energy  = 2 x 1.6384 = 3.2768 (pJ)
    The SHIFT cost can be calculated accordingly

(*) The cost of data movement between compute unit is calculated as:
    - Assume the chip clock period is 2.64 ns
    - All power and latency number generated from verilog circuit level simulation
    - Load Latency = 2 COPY (NOR) + 64 READ burst + 64 WRITE + 64 Cluster Wire Delay
                   = 2 x 2.6405 + 64 x 2.64 + 64 x 2.64 + 64 x 1.438
                   = 482 ns
    - Load Energy  = Load Latency x Total Power
                   = 435233 (ps) x 0.0079 (W)
                   = 4097 (pJ)
*/

SETBULK 0 4096 64
SETBULK 1 4096 64
SETBULK 2 4096 64
SETBULK 3 4096 64
SETBULK 4 4096 64
SETBULK 5 4096 64
SETBULK 6 4096 64
SETBULK 7 4096 64
SETBULK 8 4096 64
SETBULK 9 4096 64
SETBULK 10 4096 64
SETBULK 11 4096 64
SETBULK 12 4096 64
SETBULK 13 4096 64
SETBULK 14 4096 64
SETBULK 15 4096 64
SETBULK 16 4096 64
SETBULK 17 4096 64
SETBULK 18 4096 64
SETBULK 19 4096 64
SETBULK 20 4096 64
SETBULK 21 4096 64
SETBULK 22 4096 64
SETBULK 23 4096 64
SETBULK 24 4096 64
SETBULK 25 4096 64
SETBULK 26 4096 64
SETBULK 27 4096 64
SETBULK 28 4096 64
SETBULK 29 4096 64
SETBULK 30 4096 64
SETBULK 31 4096 64
SETBULK 32 4096 64
SETBULK 33 4096 64
SETBULK 34 4096 64
SETBULK 35 4096 64
SETBULK 36 4096 64
SETBULK 37 4096 64
SETBULK 38 4096 64
SETBULK 39 4096 64
SETBULK 40 4096 64
SETBULK 41 4096 64
SETBULK 42 4096 64
SETBULK 43 4096 64
SETBULK 44 4096 64
SETBULK 45 4096 64
SETBULK 46 4096 64
SETBULK 47 4096 64
SETBULK 48 4096 64
SETBULK 49 4096 64
SETBULK 50 4096 64
SETBULK 51 4096 64
SETBULK 52 4096 64
SETBULK 53 4096 64
SETBULK 54 4096 64
SETBULK 55 4096 64
SETBULK 56 4096 64
SETBULK 57 4096 64
SETBULK 58 4096 64
SETBULK 59 4096 64
SETBULK 60 4096 64
SETBULK 61 4096 64
SETBULK 62 4096 64
SETBULK 63 4096 64

// Addition and Subtraction is the same
ADD16 x x x 27 4
INV16 x x x 4
INV16 x x x 4
INV16 x x x 4
INV16 x x x 4
INV16 x x x 4
INV16 x x x 4
INV16 x x x 4
INV16 x x x 4
INV16 x x x 4
ABS16 x x x 27 4
ADD16 x x x 18 4
UNSETALL
