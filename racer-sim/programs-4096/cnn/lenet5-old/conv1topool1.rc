
/*
Move Conv1 output from first row of cluster:
  (*) The conv result is stored in the Z-format manner
  (*) There are 49 multiwords in the first row of clusters holding the conv result, 8 pixels each
  (*) We need to perform 49x2 GLOAD from first row to second row
  (*) 1 GLOAD is calculated as:
      - Load Latency = 2 COPY (NOR) + 65 READ burst  + 65 WRITE burst
                      + 64 Cluster Wire Delay + 64 Cluster Chip Delay
                    = 2 x 2.6405 + 65 x 2.64 + 65 x 2.64 + 64 x 1.438
                      + 64 x 311.501 = 20376.577 (ns)
      - Load Energy = Load Latency x (Wire Power + CMOS Power)
                    = 20376577 x (0.017 + 0.03)
                    = 957699.119 (pJ)
  (*) 1 GLOAD can handle data coming from 4 clusters
  (*) 1 LLOAD is calculated as:
    - Load Latency = 2 COPY (NOR) + 64 READ burst + 64 WRITE + 64 Cluster Wire Delay
                   = 2 x 2.6405 + 64 x 2.64 + 64 x 2.64 + 64 x 1.438
                   = 435.233 ns
    - Load Energy  = Load Latency x Total Power
                   = 435233 (ps) x 0.0079 (W)
                   = 3438.3 (pJ)
*/
SETBULK 0 1 1

// MOVE FROM FIRST ROW OF CLUSTERS (GLOAD)
// Move Multiword 0 from Cluster 0 - 3
SHIFT 20376.577 957699.119
// Move Multiword 0 from Cluster 4 - 5
SHIFT 20376.577 957699.119

// Move Multiword 1 from Cluster 0 - 3
SHIFT 20376.577 957699.119
// Move Multiword 1 from Cluster 4 - 5
SHIFT 20376.577 957699.119
// 2
SHIFT 20376.577 957699.119
SHIFT 20376.577 957699.119
// 3
SHIFT 20376.577 957699.119
SHIFT 20376.577 957699.119
// 4
SHIFT 20376.577 957699.119
SHIFT 20376.577 957699.119
// 5
SHIFT 20376.577 957699.119
SHIFT 20376.577 957699.119
// 6
SHIFT 20376.577 957699.119
SHIFT 20376.577 957699.119
// 7
SHIFT 20376.577 957699.119
SHIFT 20376.577 957699.119
// 8
SHIFT 20376.577 957699.119
SHIFT 20376.577 957699.119
// 9
SHIFT 20376.577 957699.119
SHIFT 20376.577 957699.119
// 10
SHIFT 20376.577 957699.119
SHIFT 20376.577 957699.119
// 11
SHIFT 20376.577 957699.119
SHIFT 20376.577 957699.119
// 12
SHIFT 20376.577 957699.119
SHIFT 20376.577 957699.119
// 13
SHIFT 20376.577 957699.119
SHIFT 20376.577 957699.119
// 14
SHIFT 20376.577 957699.119
SHIFT 20376.577 957699.119
// 15
SHIFT 20376.577 957699.119
SHIFT 20376.577 957699.119
// 16
SHIFT 20376.577 957699.119
SHIFT 20376.577 957699.119
// 17
SHIFT 20376.577 957699.119
SHIFT 20376.577 957699.119
// 18
SHIFT 20376.577 957699.119
SHIFT 20376.577 957699.119
// 19
SHIFT 20376.577 957699.119
SHIFT 20376.577 957699.119
// 20
SHIFT 20376.577 957699.119
SHIFT 20376.577 957699.119
// 21
SHIFT 20376.577 957699.119
SHIFT 20376.577 957699.119
// 22
SHIFT 20376.577 957699.119
SHIFT 20376.577 957699.119
// 23
SHIFT 20376.577 957699.119
SHIFT 20376.577 957699.119
// 24
SHIFT 20376.577 957699.119
SHIFT 20376.577 957699.119
// 25
SHIFT 20376.577 957699.119
SHIFT 20376.577 957699.119
// 26
SHIFT 20376.577 957699.119
SHIFT 20376.577 957699.119
// 27
SHIFT 20376.577 957699.119
SHIFT 20376.577 957699.119
// 28
SHIFT 20376.577 957699.119
SHIFT 20376.577 957699.119
// 29
SHIFT 20376.577 957699.119
SHIFT 20376.577 957699.119
// 30
SHIFT 20376.577 957699.119
SHIFT 20376.577 957699.119
// 31
SHIFT 20376.577 957699.119
SHIFT 20376.577 957699.119
// 32
SHIFT 20376.577 957699.119
SHIFT 20376.577 957699.119
// 33
SHIFT 20376.577 957699.119
SHIFT 20376.577 957699.119
// 34
SHIFT 20376.577 957699.119
SHIFT 20376.577 957699.119
// 35
SHIFT 20376.577 957699.119
SHIFT 20376.577 957699.119
// 36
SHIFT 20376.577 957699.119
SHIFT 20376.577 957699.119
// 37
SHIFT 20376.577 957699.119
SHIFT 20376.577 957699.119
// 38
SHIFT 20376.577 957699.119
SHIFT 20376.577 957699.119
// 39
SHIFT 20376.577 957699.119
SHIFT 20376.577 957699.119
// 40
SHIFT 20376.577 957699.119
SHIFT 20376.577 957699.119
// 41
SHIFT 20376.577 957699.119
SHIFT 20376.577 957699.119
// 42
SHIFT 20376.577 957699.119
SHIFT 20376.577 957699.119
// 43
SHIFT 20376.577 957699.119
SHIFT 20376.577 957699.119

// MOVE FROM SECOND ROW OF CLUSTER
// 0
SHIFT 435.233 20629.8
// 1
SHIFT 435.233 20629.8
// 2
SHIFT 435.233 20629.8
// 3
SHIFT 435.233 20629.8
// 4
SHIFT 435.233 20629.8
// 5
SHIFT 435.233 20629.8
// 6
SHIFT 435.233 20629.8
// 7
SHIFT 435.233 20629.8
// 8
SHIFT 435.233 20629.8
// 9
SHIFT 435.233 20629.8
// 10
SHIFT 435.233 20629.8
// 11
SHIFT 435.233 20629.8
// 12
SHIFT 435.233 20629.8
// 13
SHIFT 435.233 20629.8
// 14
SHIFT 435.233 20629.8
// 15
SHIFT 435.233 20629.8
// 16
SHIFT 435.233 20629.8
// 17
SHIFT 435.233 20629.8
// 18
SHIFT 435.233 20629.8
// 19
SHIFT 435.233 20629.8
// 20
SHIFT 435.233 20629.8
// 21
SHIFT 435.233 20629.8
// 22
SHIFT 435.233 20629.8
// 23
SHIFT 435.233 20629.8
// 24
SHIFT 435.233 20629.8
// 25
SHIFT 435.233 20629.8
// 26
SHIFT 435.233 20629.8
// 27
SHIFT 435.233 20629.8
// 28
SHIFT 435.233 20629.8
// 29
SHIFT 435.233 20629.8
// 30
SHIFT 435.233 20629.8
// 31
SHIFT 435.233 20629.8
// 32
SHIFT 435.233 20629.8
// 33
SHIFT 435.233 20629.8
// 34
SHIFT 435.233 20629.8
// 35
SHIFT 435.233 20629.8
// 36
SHIFT 435.233 20629.8
// 37
SHIFT 435.233 20629.8
// 38
SHIFT 435.233 20629.8
// 39
SHIFT 435.233 20629.8
// 40
SHIFT 435.233 20629.8
// 41
SHIFT 435.233 20629.8
// 42
SHIFT 435.233 20629.8
// 43
SHIFT 435.233 20629.8

UNSETALL
